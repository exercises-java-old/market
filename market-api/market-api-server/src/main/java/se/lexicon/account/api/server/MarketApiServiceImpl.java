package se.lexicon.account.api.server;


import com.google.protobuf.ByteString;
import com.so4it.api.ApiServiceProvider;
import com.so4it.api.Market;
import com.so4it.api.util.StreamObserverErrorHandler;
import com.so4it.common.util.object.Required;
import io.grpc.stub.StreamObserver;
import se.lexicon.market.CreateMarketRequest;
import se.lexicon.market.CreateMarketResponse;
import se.lexicon.market.MarketApiServiceGrpc;
import se.lexicon.market.component.client.MarketOrderComponentClient;

import java.util.HashMap;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@ApiServiceProvider(
        value = Market.NAME,
        version = Market.VERSION,
        properties = Market.PROPERTIES,
        specification = Market.PATH,
        specificationPackageName = Market.PACKAGE_NAME,
        specificationServiceNames = Market.SERVICE_NAMES)
public class MarketApiServiceImpl extends MarketApiServiceGrpc.MarketApiServiceImplBase {



    private MarketOrderComponentClient marketOrderComponentClient;


    public MarketApiServiceImpl(MarketOrderComponentClient marketOrderComponentClient) {
        this.marketOrderComponentClient = Required.notNull(marketOrderComponentClient,"marketOrderComponentClient");
    }

    @Override
    public void createApplication(CreateMarketRequest request, StreamObserver<CreateMarketResponse> responseObserver) {
        StreamObserverErrorHandler.of(responseObserver).onError(() -> {

            //Response r = marketOrderComponentClient.doSomething()


            //Transform the response to the class generated by gRPC in Java
            //CreateMarketResponse.newBuilder().setName(r.getName()).build();



            responseObserver.onNext(CreateMarketResponse.newBuilder().build());
            responseObserver.onCompleted();
        }, "Failed creating market");
    }
}
